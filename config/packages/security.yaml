security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
        # used to reload user from session & other features (e.g. switch_user)
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/  # Cela couvre toutes les routes qui commencent par '/' (toutes les routes de l'application)
            provider: app_user_provider  # Utilise le fournisseur d'utilisateurs défini ci-dessus
            form_login:  # Authentification par formulaire
              login_path: app_login  # La route pour afficher le formulaire de connexion
              check_path: app_login  # La route où les informations de connexion sont envoyées via une requête POST
              default_target_path: app_home  # Après une connexion réussie, l'utilisateur est redirigé vers la page /users
            logout:  # Gestion de la déconnexion
              path: /logout  # La route pour se déconnecter
                # where to redirect after logout
                # target: app_any_route
           
           
           # api_login:
           #     pattern: ^/api/login  # Cette route serait spécifique aux API (connexion via API)
           #     stateless: true  # Indique que l'API ne maintient pas de session (stateless)
           #     json_login:  # Configuration pour une authentification JSON (souvent utilisée pour les APIs)
           #     check_path: /api/login  # La route où les données de connexion sont envoyées
           #     success_handler: lexik_jwt_authentication.handler.authentication_success  # Si la connexion réussit, la réponse JSON sera gérée ici
           #     failure_handler: lexik_jwt_authentication.handler.authentication_failure  # Si la connexion échoue, la réponse JSON sera gérée ici
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }  # La page /login est publique (tout le monde peut y accéder)

    # Autorise l'accès à la page de déconnexion sans être authentifié
        - { path: ^/logout, roles: IS_AUTHENTICATED_ANONYMOUSLY }  # La page /logout est publique (tout le monde peut y accéder)

    # Autorise l'accès à la page d'inscription sans être authentifié
        - { path: ^/users/new, roles: ROLE_ADMIN }  # La page /users/new (inscription) est publique (tout le monde peut y accéder)
        - { path: ^/users/\d+/edit, roles: ROLE_ADMIN }
        - { path: ^/users/\d+/delete, roles: ROLE_ADMIN }
    # Restreint l'accès à la page des utilisateurs (/users) uniquement aux utilisateurs complètement authentifiés
        - { path: ^/users, roles: ROLE_ADMIN }

        - { path: ^/articles/new, roles: ROLE_ADMIN }  # La page /users/new (inscription) est publique (tout le monde peut y accéder)
        - { path: ^/articles/\d+/edit, roles: ROLE_ADMIN }
        - { path: ^/articles/\d+/delete, roles: ROLE_ADMIN }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
